<?xml version="1.0" encoding="UTF-8"?>
<<<<<<< HEAD
<testng-results ignored="0" total="3" passed="2" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-08-07T00:45:00 UZT" name="Search" finished-at="2023-08-07T00:45:19 UZT" duration-ms="19407">
    <groups>
    </groups>
    <test started-at="2023-08-07T00:45:00 UZT" name="C:\EpamLab\FrameworkLab\src\test\java\test\CorrectSearchTest.java" finished-at="2023-08-07T00:45:19 UZT" duration-ms="19407">
      <class name="test.CorrectSearchTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.CorrectSearchTest@5cf8edcf]" started-at="2023-08-07T00:45:00 UZT" name="setUp" description="setUp() gets the driver type from the bundle" finished-at="2023-08-07T00:45:05 UZT" duration-ms="5471" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="doSelectedItemsCorrespondToSearchRequest(java.lang.String)[pri:0, instance:test.CorrectSearchTest@5cf8edcf]" started-at="2023-08-07T00:45:05 UZT" name="doSelectedItemsCorrespondToSearchRequest" description="checks the selected items correspond to search request" data-provider="dataProviderMethod" finished-at="2023-08-07T00:45:10 UZT" duration-ms="4975" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Пальто]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- doSelectedItemsCorrespondToSearchRequest -->
        <test-method signature="doSelectedItemsCorrespondToSearchRequest(java.lang.String)[pri:0, instance:test.CorrectSearchTest@5cf8edcf]" started-at="2023-08-07T00:45:10 UZT" name="doSelectedItemsCorrespondToSearchRequest" description="checks the selected items correspond to search request" data-provider="dataProviderMethod" finished-at="2023-08-07T00:45:13 UZT" duration-ms="2947" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Шорты]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- doSelectedItemsCorrespondToSearchRequest -->
        <test-method signature="doSelectedItemsCorrespondToSearchRequest(java.lang.String)[pri:0, instance:test.CorrectSearchTest@5cf8edcf]" started-at="2023-08-07T00:45:13 UZT" name="doSelectedItemsCorrespondToSearchRequest" description="checks the selected items correspond to search request" data-provider="dataProviderMethod" finished-at="2023-08-07T00:45:18 UZT" duration-ms="5135" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[Товар]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:110)
at org.testng.Assert.failNotEquals(Assert.java:1413)
at org.testng.Assert.assertTrue(Assert.java:56)
at org.testng.Assert.assertTrue(Assert.java:66)
at test.CorrectSearchTest.lambda$doSelectedItemsCorrespondToSearchRequest$0(CorrectSearchTest.java:27)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at test.CorrectSearchTest.lambda$doSelectedItemsCorrespondToSearchRequest$1(CorrectSearchTest.java:27)
at java.base/java.lang.Iterable.forEach(Iterable.java:75)
at test.CorrectSearchTest.doSelectedItemsCorrespondToSearchRequest(CorrectSearchTest.java:25)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- doSelectedItemsCorrespondToSearchRequest -->
        <test-method is-config="true" signature="afterTestCompleted()[pri:0, instance:test.CorrectSearchTest@5cf8edcf]" started-at="2023-08-07T00:45:19 UZT" name="afterTestCompleted" description="closes the browser" finished-at="2023-08-07T00:45:19 UZT" duration-ms="197" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestCompleted -->
      </class> <!-- test.CorrectSearchTest -->
    </test> <!-- C:\EpamLab\FrameworkLab\src\test\java\test\CorrectSearchTest.java -->
  </suite> <!-- Search -->
=======
<testng-results ignored="0" total="5" passed="5" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-08-03T09:28:14 MSK" name="Registration page Tests" finished-at="2023-08-03T09:28:28 MSK" duration-ms="13979">
    <groups>
    </groups>
    <test started-at="2023-08-03T09:28:14 MSK" name="Registration page Tests" finished-at="2023-08-03T09:28:28 MSK" duration-ms="13979">
      <class name="test.RegistrationPageTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:test.RegistrationPageTest@383790cf]" started-at="2023-08-03T09:28:14 MSK" name="setUp" description="setUp() gets the driver type from the bundle" finished-at="2023-08-03T09:28:18 MSK" duration-ms="4409" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="preRegisterUserForRegistrationPageTests()[pri:0, instance:test.RegistrationPageTest@383790cf]" started-at="2023-08-03T09:28:18 MSK" name="preRegisterUserForRegistrationPageTests" finished-at="2023-08-03T09:28:20 MSK" duration-ms="2222" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preRegisterUserForRegistrationPageTests -->
        <test-method is-config="true" signature="initialPage()[pri:0, instance:test.RegistrationPageTest@383790cf]" started-at="2023-08-03T09:28:20 MSK" name="initialPage" description="Initializes and opens registration page" finished-at="2023-08-03T09:28:21 MSK" duration-ms="162" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialPage -->
        <test-method signature="preregisteredUserFromBundleRegistrationTest()[pri:0, instance:test.RegistrationPageTest@383790cf]" started-at="2023-08-03T09:28:21 MSK" name="preregisteredUserFromBundleRegistrationTest" description="Registration of user from bundle " finished-at="2023-08-03T09:28:22 MSK" duration-ms="1001" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preregisteredUserFromBundleRegistrationTest -->
        <test-method is-config="true" signature="initialPage()[pri:0, instance:test.RegistrationPageTest@383790cf]" started-at="2023-08-03T09:28:22 MSK" name="initialPage" description="Initializes and opens registration page" finished-at="2023-08-03T09:28:22 MSK" duration-ms="122" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialPage -->
        <test-method signature="randomUserRegistrationTest()[pri:0, instance:test.RegistrationPageTest@383790cf]" started-at="2023-08-03T09:28:22 MSK" name="randomUserRegistrationTest" description="Random user registration test" finished-at="2023-08-03T09:28:23 MSK" duration-ms="1593" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- randomUserRegistrationTest -->
        <test-method is-config="true" signature="initialPage()[pri:0, instance:test.RegistrationPageTest@383790cf]" started-at="2023-08-03T09:28:23 MSK" name="initialPage" description="Initializes and opens registration page" finished-at="2023-08-03T09:28:23 MSK" duration-ms="142" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialPage -->
        <test-method signature="registerUserWithInvalidData(utils.RegistrationOptions)[pri:0, instance:test.RegistrationPageTest@383790cf]" started-at="2023-08-03T09:28:23 MSK" name="registerUserWithInvalidData" description="Register user with invalid data input" data-provider="dataProviderMethodForInvalidDataTest" finished-at="2023-08-03T09:28:25 MSK" duration-ms="1200" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[NAME]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerUserWithInvalidData -->
        <test-method is-config="true" signature="initialPage()[pri:0, instance:test.RegistrationPageTest@383790cf]" started-at="2023-08-03T09:28:25 MSK" name="initialPage" description="Initializes and opens registration page" finished-at="2023-08-03T09:28:25 MSK" duration-ms="150" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialPage -->
        <test-method signature="registerUserWithInvalidData(utils.RegistrationOptions)[pri:0, instance:test.RegistrationPageTest@383790cf]" started-at="2023-08-03T09:28:25 MSK" name="registerUserWithInvalidData" description="Register user with invalid data input" data-provider="dataProviderMethodForInvalidDataTest" finished-at="2023-08-03T09:28:26 MSK" duration-ms="1238" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[EMAIL]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerUserWithInvalidData -->
        <test-method is-config="true" signature="initialPage()[pri:0, instance:test.RegistrationPageTest@383790cf]" started-at="2023-08-03T09:28:26 MSK" name="initialPage" description="Initializes and opens registration page" finished-at="2023-08-03T09:28:26 MSK" duration-ms="232" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialPage -->
        <test-method signature="registerUserWithInvalidData(utils.RegistrationOptions)[pri:0, instance:test.RegistrationPageTest@383790cf]" started-at="2023-08-03T09:28:26 MSK" name="registerUserWithInvalidData" description="Register user with invalid data input" data-provider="dataProviderMethodForInvalidDataTest" finished-at="2023-08-03T09:28:27 MSK" duration-ms="1062" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[PASSWORD]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerUserWithInvalidData -->
        <test-method is-config="true" signature="afterTestCompleted()[pri:0, instance:test.RegistrationPageTest@383790cf]" started-at="2023-08-03T09:28:27 MSK" name="afterTestCompleted" description="closes the browser" finished-at="2023-08-03T09:28:28 MSK" duration-ms="279" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTestCompleted -->
      </class> <!-- test.RegistrationPageTest -->
    </test> <!-- Registration page Tests -->
  </suite> <!-- Registration page Tests -->
>>>>>>> main
</testng-results>
